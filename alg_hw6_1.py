#  HW6. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
#  в рамках первых трех уроков. Проанализировать результат и определить программы
#  с наиболее эффективным использованием памяти.
#
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду.
#  Также укажите в комментариях версию Python и разрядность вашей ОС.
#
#  Выбрана задача:
# 2. Написать два алгоритма нахождения i-го по счёту простого числа.
#
#     Без использования «Решета Эратосфена»;
#     Используя алгоритм «Решето Эратосфена»
#

"""
Python 3.7
Интерпретатор PyCharm
64 разрядная Win 10
"""

import sys
from pympler import asizeof
from memory_profiler import profile

def show_sizeof(obj):
    print("Объект: {0}\n Тип: {1}, Размер: {2} байт".format(obj, obj.__class__, asizeof.asizeof(obj)))

"""
# Вариант с использованием алгоритма «Решето Эратосфена»

# @profile()
def sieve(n):
    print(f'Ищем в диапазоне до {n}...')

    a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    show_sizeof(a)

    # вторым элементом является единица, которую не считают простым числом
    # забиваем ее нулем.
    a[1] = 0

    m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while m < n:  # перебор всех элементов до заданного числа
        if a[m] != 0:  # если он не равен нулю, то
            j = m * 2  # увеличить в два раза (текущий элемент простое число)
            while j < n:
                a[j] = 0  # заменить на 0
                j = j + m  # перейти в позицию на m больше
        m += 1
    return a

# @profile
def main():
    print('Алгоритм с использованием решета Эратосфена')
    i = int(input('Введите i (какое по номеру простое число вы хотите найти) -->'))
    # i = 5

    a_try = []
    num = 10  # начнем искать в диапазоне до 10

    while i >= (len(a_try)):
        a_try = list(set(sieve(num)))  # формирование массива простых и удаление нулей
        num *= 10  # будем увеличивать область поиска на порядок с каждой итерацией

    # вывод простых чисел на экран
    a_try.sort()
    show_sizeof(a_try)
    #print(a_try)
    print(f'Всего найдено {len(a_try)-1} простых чисел')
    print(f'{i}-е простое число = {a_try[i]}')


main()
"""

"""
Алгоритм с использованием решета Эратосфена

размеры переменных с помощью asizeof:

Введите i (какое по номеру простое число вы хотите найти) -->20000
Ищем в диапазоне до 10...
Объект: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 Тип: <class 'list'>, Размер: 264 байт
Ищем в диапазоне до 100...
Объект: [0, 1, 2, 3, 4, 5, ... 96, 97, 98, 99]
 Тип: <class 'list'>, Размер: 2064 байт
Ищем в диапазоне до 1000...
Объект: [0, 1, 2, 3, 4, ... 997, 998, 999]
 Тип: <class 'list'>, Размер: 20520 байт
Ищем в диапазоне до 10000...
Объект: [0, 1, 2, 3, .... 9996, 9997, 9998, 9999]
 Тип: <class 'list'>, Размер: 203816 байт
Ищем в диапазоне до 100000...
Объект: [0, 1, 2, 3, 4, ... 99997, 99998, 99999]
 Тип: <class 'list'>, Размер: 2012240 байт
Ищем в диапазоне до 1000000...
Объект: [0, 1, 2, ..... , 999997, 999998, 999999]
 Тип: <class 'list'>, Размер: 20348736 байт
Объект: [0, 2, 3, 5, 7, ...., 999959, 999961, 999979, 999983]
 Тип: <class 'list'>, Размер: 1609288 байт
 
Всего найдено 78498 простых чисел
20000-е простое число = 224737


Использование памяти, измерение с помощью @profile:

Введите i (какое по номеру простое число вы хотите найти) -->20000
Ищем в диапазоне до 10...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     13.6 MiB     13.6 MiB   @profile()
    30                             def sieve(n):
    31     13.6 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     13.6 MiB      0.0 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     13.6 MiB      0.0 MiB       a[1] = 0
    38                             
    39     13.6 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     13.6 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     13.6 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     13.6 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     13.6 MiB      0.0 MiB               while j < n:
    44     13.6 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     13.6 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     13.6 MiB      0.0 MiB           m += 1
    47     13.6 MiB      0.0 MiB       return a


Ищем в диапазоне до 100...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     13.6 MiB     13.6 MiB   @profile()
    30                             def sieve(n):
    31     13.6 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     13.6 MiB      0.0 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     13.6 MiB      0.0 MiB       a[1] = 0
    38                             
    39     13.6 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     13.6 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     13.6 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     13.6 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     13.6 MiB      0.0 MiB               while j < n:
    44     13.6 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     13.6 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     13.6 MiB      0.0 MiB           m += 1
    47     13.6 MiB      0.0 MiB       return a


Ищем в диапазоне до 1000...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     13.6 MiB     13.6 MiB   @profile()
    30                             def sieve(n):
    31     13.6 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     13.6 MiB      0.0 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     13.6 MiB      0.0 MiB       a[1] = 0
    38                             
    39     13.6 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     13.6 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     13.6 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     13.6 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     13.6 MiB      0.0 MiB               while j < n:
    44     13.6 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     13.6 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     13.6 MiB      0.0 MiB           m += 1
    47     13.6 MiB      0.0 MiB       return a


Ищем в диапазоне до 10000...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     13.7 MiB     13.7 MiB   @profile()
    30                             def sieve(n):
    31     13.7 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     13.9 MiB      0.1 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     13.9 MiB      0.0 MiB       a[1] = 0
    38                             
    39     13.9 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     13.9 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     13.9 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     13.9 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     13.9 MiB      0.0 MiB               while j < n:
    44     13.9 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     13.9 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     13.9 MiB      0.0 MiB           m += 1
    47     13.9 MiB      0.0 MiB       return a


Ищем в диапазоне до 100000...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     13.8 MiB     13.8 MiB   @profile()
    30                             def sieve(n):
    31     13.8 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     15.6 MiB      0.2 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     15.6 MiB      0.0 MiB       a[1] = 0
    38                             
    39     15.6 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     15.7 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     15.7 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     15.7 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     15.7 MiB      0.0 MiB               while j < n:
    44     15.7 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     15.7 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     15.7 MiB      0.0 MiB           m += 1
    47     15.7 MiB      0.0 MiB       return a


Ищем в диапазоне до 1000000...
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    29     15.3 MiB     15.3 MiB   @profile()
    30                             def sieve(n):
    31     15.3 MiB      0.0 MiB       print(f'Ищем в диапазоне до {n}...')
    32                             
    33     33.1 MiB      0.3 MiB       a = [k for k in range(n)]  # заполнение массива значениями от 0 до n-1
    34                             
    35                                 # вторым элементом является единица, которую не считают простым числом
    36                                 # забиваем ее нулем.
    37     33.1 MiB      0.0 MiB       a[1] = 0
    38                             
    39     33.1 MiB      0.0 MiB       m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    40     33.1 MiB      0.0 MiB       while m < n:  # перебор всех элементов до заданного числа
    41     33.1 MiB      0.0 MiB           if a[m] != 0:  # если он не равен нулю, то
    42     33.1 MiB      0.0 MiB               j = m * 2  # увеличить в два раза (текущий элемент простое число)
    43     33.1 MiB      0.0 MiB               while j < n:
    44     33.1 MiB      0.0 MiB                   a[j] = 0  # заменить на 0
    45     33.1 MiB      0.0 MiB                   j = j + m  # перейти в позицию на m больше
    46     33.1 MiB      0.0 MiB           m += 1
    47     33.0 MiB      0.0 MiB       return a


Всего найдено 78498 простых чисел
20000-е простое число = 224737
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
    49     13.6 MiB     13.6 MiB   @profile
    50                             def main():
    51     13.6 MiB      0.0 MiB       print('Алгоритм с использованием решета Эратосфена')
    52     13.6 MiB      0.0 MiB       i = int(input('Введите i (какое по номеру простое число вы хотите найти) -->'))
    53                                 # i = 5
    54                             
    55     13.6 MiB      0.0 MiB       a_try = []
    56     13.6 MiB      0.0 MiB       num = 10  # начнем искать в диапазоне до 10
    57                             
    58     29.5 MiB      0.0 MiB       while i >= (len(a_try)):
    59     29.5 MiB     14.2 MiB           a_try = list(set(sieve(num)))  # формирование массива простых и удаление нулей
    60     29.5 MiB      0.0 MiB           num *= 10  # будем увеличивать область поиска на порядок с каждой итерацией
    61                             
    62                                 # вывод простых чисел на экран
    63     29.5 MiB      0.0 MiB       a_try.sort()
    64                                 #print(a_try)
    65     29.5 MiB      0.0 MiB       print(f'Всего найдено {len(a_try)-1} простых чисел')
    66     29.5 MiB      0.0 MiB       print(f'{i}-е простое число = {a_try[i]}')

"""


# Вариант без использования алгоритма «Решето Эратосфена»


def is_prime(n):
    for j in range(3, int(n ** 0.5) + 1):
        if n % j == 0:
            return False
    return True


# @profile
def search(n):
    primes = [2]
    i = 3
    while len(primes) < n:
        if is_prime(i) == 1:
            primes.append(i)
        i += 2
    return primes


# @profile
def main():
    print('Алгоритм без использования решета Эратосфена')
    num = int(input('Введите i (какое по номеру простое число вы хотите найти) -->'))
    # num = 5
    a_try = search(num)

    show_sizeof(a_try)

    prime_num = a_try[num - 1]
    # print(a_try)
    print(f'Всего найдено {len(a_try)} простых чисел')
    print(f'{num}-е простое число = {prime_num}')


main()


"""
Алгоритм без использования решета Эратосфена


Введите i (какое по номеру простое число вы хотите найти) -->20000

размер массива 20000 простых чисел:
Объект: [2, 3, 5, 7, 11, ..., 224711, 224717, 224729, 224737]
 Тип: <class 'list'>, Размер: 400704 байт


Line #    Mem usage    Increment   Line Contents
================================================
   110     13.5 MiB     13.5 MiB   @profile
   111                             def search(n):
   112     13.5 MiB      0.0 MiB       primes = [2]
   113     13.5 MiB      0.0 MiB       i = 3
   114     14.1 MiB      0.1 MiB       while len(primes) < n:
   115     14.1 MiB      0.1 MiB           if is_prime(i) == 1:
   116     14.1 MiB      0.0 MiB               primes.append(i)
   117     14.1 MiB      0.0 MiB           i += 2
   118     14.1 MiB      0.0 MiB       return primes


Всего найдено 20000 простых чисел
20000-е простое число = 224737
Filename: C:/Users/LMAXL/Desktop/prog/alg_hw2/Alg_hw6/alg_hw6_1.py

Line #    Mem usage    Increment   Line Contents
================================================
   121     13.5 MiB     13.5 MiB   @profile
   122                             def main():
   123     13.5 MiB      0.0 MiB       print('Алгоритм без использования решета Эратосфена')
   124     13.5 MiB      0.0 MiB       num = int(input('Введите i (какое по номеру простое число вы хотите найти) -->'))
   125                                 # num = 5
   126     14.1 MiB      0.6 MiB       a_try = search(num)
   127     14.1 MiB      0.0 MiB       prime_num = a_try[num - 1]
   128                                 # print(a_try)
   129     14.1 MiB      0.0 MiB       print(f'Всего найдено {len(a_try)} простых чисел')
   130     14.1 MiB      0.0 MiB       print(f'{num}-е простое число = {prime_num}')

"""